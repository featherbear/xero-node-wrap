type Payload = unknown


import { createHmac } from 'crypto'
import type { IncomingMessage, OutgoingMessage } from 'http'

/**
 * Generate payload validation helper functions for a given secret
 * 
 * @param secret Webhook Secret (generated by Xero)
 */
function generatePayloadHandler(secret: string) {
    /**
     * Create HMAC256 hash of the payload
     * @param payloadBuffer Buffer of the JSON payload
     * @returns 
     */
    const hashPayload = (payloadBuffer: Buffer) =>
        createHmac('sha256', secret)
            .update(payloadBuffer)
            .digest('base64')

    /**
     * Validation middleware for Express-like servers
     */
    function payloadMiddlewareExpress(req: IncomingMessage & { body: Buffer }, res: OutgoingMessage & { statusCode: number }, next?: Function) {
        if (hashPayload(req.body) !== req.headers['x-xero-signature']) {
            res.statusCode = 401
            return res.end()
        }

        req.body = <any><Payload>req.body.toJSON()
        next()
    }

    /**
     * Validate payload against signature
     * @param payloadBuffer Buffer of the JSON payload to hash
     * @param signature Expected hash
     * @param successCallback Callback on success
     * @param failCallback Callback on fail
     */
    function handlePayload(payloadBuffer: Buffer, signature: string, successCallback: (payload: Payload) => any, failCallback: Function) {
        if (hashPayload(payloadBuffer) === signature) {
            successCallback(payloadBuffer.toJSON())
        } else {
            failCallback()
        }
    }

    return {
        hashPayload,
        payloadMiddlewareExpress,
        handlePayload
    }
}

export default generatePayloadHandler